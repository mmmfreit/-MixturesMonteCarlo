# -*- coding: utf-8 -*-
"""Monte Carlo Simulation for creating mixtures. Exemplo: Cinza + Filler + Cimento

Authors: Emílio Mercuri and Bárbara Cicuto

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V9XupmSipBnOSVeCwPa-lwn3NTXJl3P3

## Simulação Monte Carlo para misturas - Cinza volante + Filler + Cimento

Código Python para calcular o menor somatório de RSS de misturas ternárias em relação à relação de Alfred
"""

# Importando bibliotecas
import pandas as pd
import numpy
import random

"""### Importanto os CSVs"""

dt = pd.read_csv('https://www.dropbox.com/s/oraamtf2nev97k1/Dados_CSV_dosagem.csv?dl=1',sep=';')

dt[0:3]

type(dt['diametro(mm)'].values)

# Pode mudar o expoente aqui:
q = 0.25

diametro      = dt['diametro(mm)'].values
areianatural  = dt['Areia Natural'].values
brita0natural = dt['Brita #0 Natural'].values
brita1natural = dt['Brita #1 Natural'].values
cimento       = dt['Cimento'].values
cv            = dt['Cinza Volante'].values
filler        = dt['Filler'].values
cal           = dt['Cal'].values

"""### Mistura de Agregados Reciclados e Cimento"""

numpy.random.uniform(0,1.0,size=5)

#Criação da lista vazia que irá receber os valores do looping
l_p_ci = [] 
l_p_arNAT = []
l_p_br0NAT = []
l_p_br1NAT = []
l_p_cv = []
l_p_filler = []

#Massa específica (ME)
ME_cimento = 3.14
ME_areia_natural = 2.51
ME_brita0_natural = 2.63
ME_brita1_natural = 2.7
ME_cinza_volante = 2.05
ME_filler = 2.77

n = 0 
while n < 1_000_000:
    proporcoes = numpy.random.uniform(0,1.0,size=5)
    
    if proporcoes.sum()<1.0:
        #n += 1
        proporcoes_lista = list(proporcoes)
        proporcoes_lista.append(1-proporcoes.sum())
        prop = numpy.array(proporcoes_lista)

        #Condições relacionada às proporções em massa
        if (proporcoes_lista[0] * ME_cimento) >= ((proporcoes_lista[4] * ME_cinza_volante) + (proporcoes_lista[5] * ME_filler)) and (proporcoes_lista[5] * ME_filler) <= (proporcoes_lista[4] * ME_cinza_volante):
            n += 1

            # cimento
            l_p_ci.append(proporcoes_lista[0])

            # areia Natural
            l_p_arNAT.append(proporcoes_lista[1])

            # brita 0 Natural
            l_p_br0NAT.append(proporcoes_lista[2])

            # brita 1 Natural
            l_p_br1NAT.append(proporcoes_lista[3])         

            # Cinza Volante
            l_p_cv.append(proporcoes_lista[4])   

            # Filler
            l_p_filler.append(proporcoes_lista[5])

"""### Simulação Monte Carlo - Mistura de 5 materiais"""

l_soma_rss = []

for n in range(1):
    
    soma_rss_menor = 100.0 
    
    for k in range(1_000_000):

        conjunto = ((cimento*l_p_ci[k]) + (areianatural*l_p_arNAT[k]) + (brita0natural*l_p_br0NAT[k]) + (brita1natural*l_p_br1NAT[k]) + 
                    (cv*l_p_cv[k]) + (filler*l_p_filler[k]))

        alfred = 100*(((diametro**q)-(numpy.min(diametro))**q)/((numpy.max(diametro)**q)-(numpy.min(diametro)**q)))

        rss = ((conjunto/100)-(alfred/100))**2

        soma_rss = numpy.sum(rss)
      
        l_soma_rss.append(soma_rss)

posicao = numpy.where(numpy.array(l_soma_rss) == numpy.min(l_soma_rss)) #Define a posição do menor rss
pos = posicao[0][0]

print("O menor somatório RSS é: ", l_soma_rss[pos])
print(" ")
print("Proporção cimento: ", l_p_ci[pos])
print("Proporção areia natural: ",   l_p_arNAT[pos])
print("Proporção brita 0 natural: ",l_p_br0NAT[pos])
print("Proporção brita 1 natural: ",   l_p_br1NAT[pos])
print("Proporção cinza volante: ",   l_p_cv[pos])
print("Proporção filler: ",   l_p_filler[pos])
